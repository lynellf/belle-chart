// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Lookup from "./Lookup.bs.js";
import * as Belt_Array from "./../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "./../../../node_modules/rescript/lib/es6/belt_Option.js";
import * as ReactChartjs from "react-chartjs-2";

var belowAverageLine = [
  {
    x: -3,
    y: 0.00135
  },
  {
    x: -2,
    y: 0.02275
  },
  {
    x: -1,
    y: 0.15866
  }
];

var averageLine = [
  {
    x: -1,
    y: 0.15866
  },
  {
    x: 0,
    y: 0.5
  },
  {
    x: 1,
    y: 0.15866
  }
];

var aboveAverageLine = [
  {
    x: 1,
    y: 0.15866
  },
  {
    x: 2,
    y: 0.02275
  },
  {
    x: 3,
    y: 0.00135
  }
];

var defaultOptions = {
  legend: {
    display: false
  },
  scales: {
    yAxes: {
      display: false
    }
  }
};

function getLabel(tooltipItem, data) {
  var defaultPoint = {
    label: "No Label, No value",
    x: 0.0,
    y: 0.0,
    color: "black"
  };
  var defaultSet = {
    data: []
  };
  var index = tooltipItem.index;
  var allPoints = data.datasets;
  var datasets = Belt_Array.get(allPoints, 3);
  var datapoints = Belt_Option.getWithDefault(datasets, defaultSet).data;
  var point = Belt_Array.get(datapoints, index);
  return Belt_Option.getWithDefault(point, defaultPoint).label;
}

function formatDatapoints(data, rawPoints, xScatter) {
  var scatter = Belt_Option.getWithDefault(xScatter, false);
  var formattedPoints = Belt_Array.map(rawPoints, (function (dataItem) {
          var x = dataItem.value;
          var label = dataItem.label;
          return {
                  x: x,
                  y: Lookup.getY(x, scatter),
                  label: label
                };
        }));
  return Object.assign(data, {
              data: formattedPoints
            });
}

function getDefaultOptions(chartOptions) {
  return Belt_Option.getWithDefault(chartOptions, defaultOptions);
}

function Belle$Main$default(Props) {
  var data = Props.data;
  var options = Props.options;
  var xScatter = Props.xScatter;
  var baseDatasets = [
    {
      type: "line",
      data: belowAverageLine,
      fill: true,
      backgroundColor: "rgba(246, 36, 89, 0.3)",
      borderColor: "rgba(0, 0, 0, 0)",
      pointBackgroundColor: "rgba(0, 0, 0, 0)",
      pointBorderColor: "rgba(0, 0, 0, 0)",
      pointHoverRadius: 0,
      showLine: true
    },
    {
      type: "line",
      data: averageLine,
      fill: true,
      backgroundColor: "rgba(244, 208, 63, 0.3)",
      borderColor: "rgba(0, 0, 0, 0)",
      pointBackgroundColor: "rgba(0, 0, 0, 0)",
      pointBorderColor: "rgba(0, 0, 0, 0)",
      pointHoverRadius: 0,
      showLine: true
    },
    {
      type: "line",
      data: aboveAverageLine,
      fill: true,
      backgroundColor: "rgba(35, 203, 167, 0.3)",
      borderColor: "rgba(0, 0, 0, 0)",
      pointBackgroundColor: "rgba(0, 0, 0, 0)",
      pointBorderColor: "rgba(0, 0, 0, 0)",
      pointHoverRadius: 0,
      showLine: true
    }
  ];
  var rawPoints = data.data;
  var formattedData = formatDatapoints(data, rawPoints, xScatter);
  var mergedData = Belt_Array.concat(baseDatasets, [formattedData]);
  var chartData = {
    datasets: mergedData
  };
  var standardOptions = {
    legend: {
      display: false
    },
    scales: {
      yAxes: [
        {
          display: false
        },
        {
          ticks: {
            display: false
          },
          gridLines: {
            display: false
          }
        }
      ]
    },
    tooltips: {
      callbacks: {
        label: getLabel
      }
    }
  };
  var defaults = Belt_Option.getWithDefault(options, defaultOptions);
  var mergedOptions = Object.assign(defaults, standardOptions);
  return React.createElement(ReactChartjs.Scatter, {
              data: chartData,
              options: mergedOptions
            });
}

var Main = {
  belowAverageLine: belowAverageLine,
  averageLine: averageLine,
  aboveAverageLine: aboveAverageLine,
  defaultOptions: defaultOptions,
  getLabel: getLabel,
  formatDatapoints: formatDatapoints,
  getDefaultOptions: getDefaultOptions,
  $$default: Belle$Main$default
};

var $$default = Belle$Main$default;

export {
  Main ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
